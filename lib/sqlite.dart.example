import 'package:sqflite/sqflite.dart';
import 'package:path/path.dart' as path;
class SQLite {
  static String dbPath = '';
  static Database? database;
//todo: Get database path method
static Future setDatabasePath() async {
  // Get a location using getDatabasesPath
  var databasesPath = await getDatabasesPath();
  SQLite.dbPath = path.join(databasesPath, 'smartsfv.db');
}
//todo: Save datas to cache method
static Future<void> saveToCache() async {
  // Insert some records in a transaction
await SQLite.database!.transaction((cursor) async {
  int id1 = await cursor.rawInsert(
      'INSERT INTO Test(name, value, num) VALUES("some name", 1234, 456.789)');
  print('inserted1: $id1');
  int id2 = await cursor.rawInsert(
      'INSERT INTO Test(name, value, num) VALUES(?, ?, ?)',
      ['another name', 12345678, 3.1416]);
  print('inserted2: $id2');
});
}

//todo: Open database method
static Future<void> open() async {
// open the database
SQLite.database = await openDatabase(SQLite.dbPath, version: 1, onCreate: (Database db, int version) async {
  // When creating the db, create the table
  await db.execute(
      'CREATE TABLE IF NOT EXIST Cache (id TEXT PRIMARY KEY, value TEXT)');
},);
}
}










// Update some record
int count = await database.rawUpdate(
    'UPDATE Test SET name = ?, value = ? WHERE name = ?',
    ['updated name', '9876', 'some name']);
print('updated: $count');

// Get the records
List<Map> list = await database.rawQuery('SELECT * FROM Test');
List<Map> expectedList = [
  {'name': 'updated name', 'id': 1, 'value': 9876, 'num': 456.789},
  {'name': 'another name', 'id': 2, 'value': 12345678, 'num': 3.1416}
];
print(list);
print(expectedList);
assert(const DeepCollectionEquality().equals(list, expectedList));

// Count the records
count = Sqflite
    .firstIntValue(await database.rawQuery('SELECT COUNT(*) FROM Test'));
assert(count == 2);

// Delete a record
count = await database
    .rawDelete('DELETE FROM Test WHERE name = ?', ['another name']);
assert(count == 1);

// Close the database
await database.close();